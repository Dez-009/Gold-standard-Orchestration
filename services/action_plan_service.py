# Notes: Import OpenAI client for calling the chat completion API
from openai import OpenAI

# Notes: Import helper to load application settings
from config import get_settings

# Notes: Import function to gather user context memory for prompts
from services.ai_memory_service import get_user_context_memory

# Notes: Import SQLAlchemy Session type for database operations
from sqlalchemy.orm import Session

# Notes: Initialize settings and OpenAI client using the provided API key
settings = get_settings()
client = OpenAI(api_key=settings.openai_api_key)

# Notes: Generate a step-by-step action plan for a user's goal

def generate_action_plan(db: Session, user_id: int, user_goal: str) -> str:
    """Return an actionable plan generated by the AI based on user context."""

    # Notes: Retrieve context memory (sessions, journals) for personalization
    memory = get_user_context_memory(db, user_id)

    # Notes: Core instruction for the AI on how to create the action plan
    system_prompt = (
        "You are Vida, an AI Life Coach. Based on the user\u2019s personal history "
        "and their new goal, break the goal into a simple, practical action plan "
        "with 3-5 specific steps. Focus on real-world execution."
    )

    # Notes: Construct messages for the OpenAI chat completion endpoint
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"Goal: {user_goal}\nUser Context: {memory}"},
    ]

    # Notes: Call OpenAI to generate the action plan
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.7,
        max_tokens=1024,
    )

    # Notes: Return just the textual content of the AI's first response
    return response.choices[0].message.content
