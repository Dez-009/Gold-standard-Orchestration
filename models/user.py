from sqlalchemy import Column, Integer, String, Boolean
from sqlalchemy.orm import relationship

from database.base import Base


class User(Base):
    """SQLAlchemy model for application users."""

    __tablename__ = "users"

    # Basic user attributes
    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    phone_number = Column(String, unique=True, nullable=True)
    hashed_password = Column(String, nullable=False)
    full_name = Column(String, nullable=True)
    age = Column(Integer, nullable=True)
    sex = Column(String, nullable=True)
    is_active = Column(Boolean, default=True)
    # Notes: Role used for access control. Supported roles in increasing order
    # Notes: of privilege are: user < beta_tester < pro_user < admin
    role = Column(String, default="user")

    # Relationships to other models
    sessions = relationship(
        "Session", back_populates="user", cascade="all, delete"
    )
    journal_entries = relationship(
        "JournalEntry", back_populates="user", cascade="all, delete"
    )
    goals = relationship(
        "Goal", back_populates="user", cascade="all, delete"
    )
    # Track the tasks assigned to the user
    tasks = relationship(
        "Task", back_populates="user", cascade="all, delete"
    )
    daily_checkins = relationship(
        "DailyCheckIn", back_populates="user", cascade="all, delete"
    )
    audit_logs = relationship(
        "AuditLog", back_populates="user", cascade="all, delete"
    )
    # Notes: Track the habits associated with the user
    habits = relationship(
        "Habit", back_populates="user", cascade="all, delete"
    )
    # Notes: List of billing subscriptions for the user
    subscriptions = relationship(
        "Subscription", back_populates="user", cascade="all, delete"
    )
    # Notes: Records of AI agents assigned to the user
    agent_assignments = relationship(
        "AgentAssignment", back_populates="user", cascade="all, delete"
    )

    # Notes: Keep history of agent interactions for context injection
    interaction_logs = relationship(
        "AgentInteractionLog", back_populates="user", cascade="all, delete"
    )
    # Notes: Personality preferences selected per coaching domain
    personality_assignments = relationship(
        "UserPersonality", back_populates="user", cascade="all, delete"
    )

    # Notes: Collection of generated behavioral insights for the user
    behavioral_insights = relationship(
        "BehavioralInsight", back_populates="user", cascade="all, delete"
    )

    # Notes: List of AI-generated journal summaries for the user
    journal_summaries = relationship(
        "JournalSummary", back_populates="user", cascade="all, delete"
    )

    # Notes: Collection of summarized journal history entries
    summarized_journals = relationship(
        "SummarizedJournal", back_populates="user", cascade="all, delete"
    )

    # Notes: History of AI-generated journal trend analyses for the user
    journal_trends = relationship(
        "JournalTrend", back_populates="user", cascade="all, delete"
    )

    # Notes: Stored analytics events generated by the user
    analytics_events = relationship(
        "AnalyticsEvent", back_populates="user", cascade="all, delete"
    )

    # Notes: Login sessions recorded for usage tracking
    user_sessions = relationship(
        "UserSession", back_populates="user", cascade="all, delete"
    )

    # Notes: Lifecycle logs produced by agent orchestration events
    agent_lifecycle_logs = relationship(
        "AgentLifecycleLog", back_populates="user", cascade="all, delete"
    )

    # Notes: Latest recorded state for each assigned agent
    agent_states = relationship(
        "AgentState", back_populates="user", cascade="all, delete"
    )

    # Notes: Execution logs capturing each agent run
    agent_execution_logs = relationship(
        "AgentExecutionLog", back_populates="user", cascade="all, delete"
    )

    # Notes: Scoring results produced for each agent response
    agent_scores = relationship(
        "AgentScore", back_populates="user", cascade="all, delete"
    )
    # Notes: Self-reported accuracy scores linked to summaries
    agent_self_scores = relationship(
        "AgentSelfScore",
        back_populates="user",
        cascade="all, delete",
    )

    # Notes: Flags indicating emotional or interpersonal conflict detected in journals
    conflict_flags = relationship(
        "ConflictFlag", back_populates="user", cascade="all, delete"
    )

    # Notes: Persona tokens assigned to modify agent behavior
    persona_tokens = relationship(
        "PersonaToken", back_populates="user", cascade="all, delete"
    )

# Footnote: Defines the User ORM model and relationships.
