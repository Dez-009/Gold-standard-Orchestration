from __future__ import annotations

"""SQLAlchemy model storing AI-generated summaries of user journals."""

# Notes: Import utilities for uuid generation and timestamps
from uuid import uuid4
from datetime import datetime

# Notes: SQLAlchemy column helpers and types
from sqlalchemy import Column, DateTime, ForeignKey, Text, Boolean
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

from database.base import Base


class SummarizedJournal(Base):
    """Historical journal summary generated by the orchestration pipeline."""

    __tablename__ = "summarized_journals"

    # Notes: Primary key identifying each summary record
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    # Notes: Foreign key linking back to the owning user
    user_id = Column(ForeignKey("users.id"), nullable=False)
    # Notes: The text produced by the summarization agent
    summary_text = Column(Text, nullable=False)
    # Notes: Timestamp when the summary was created
    created_at = Column(DateTime, default=datetime.utcnow)
    # Notes: Optional list of journal entry ids used for the summary
    source_entry_ids = Column(Text, nullable=True)
    # Notes: Optional free-form notes left by administrators
    admin_notes = Column(Text, nullable=True)
    # Notes: Mark when moderation or user reports flag this summary
    flagged = Column(Boolean, default=False)
    # Notes: Explanation of why the summary was flagged
    flag_reason = Column(Text, nullable=True)
    # Notes: Timestamp when the flag was recorded
    flagged_at = Column(DateTime, nullable=True)

    # Notes: Timeline of admin notes associated with this summary
    admin_notes_timeline = relationship(
        "AdminSummaryNote",
        back_populates="summary",
        cascade="all, delete-orphan",
    )

    # Notes: Relationship back to the user
    user = relationship("User", back_populates="summarized_journals")
    # Notes: Relationship containing any agent self scored evaluations
    self_scores = relationship(
        "AgentSelfScore",
        back_populates="summary",
        cascade="all, delete-orphan",
    )

    def __repr__(self) -> str:
        """Return debug representation including id and user."""

        return f"<SummarizedJournal id={self.id} user_id={self.user_id}>"

# Footnote: This table keeps a record of each AI-generated journal summary.
